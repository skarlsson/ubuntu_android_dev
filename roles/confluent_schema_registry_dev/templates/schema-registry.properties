#service port
port={{ schema_registry_port }}

debug=false

#Zookeeper url for the Kafka cluster
kafkastore.connection.url={% for server in zookeeper_hosts %}{{server.host}}:{{ zookeeper_client_port }}{% if not loop.last %},{% endif %}{% endfor %}

# Zookeeper session timeout
# kafkastore.zk.session.timeout.ms

# The durable single partition topic that acts
# as the durable log for the data
# kafkastore.topic=_schemas

# The desired replication factor of the schema topic. The actual replication factor
# will be the smaller of this value and the number of live Kafka brokers
# kafkastore.topic.replication.factor=3

#The timeout for an operation on the Kafka store
# kafkastore.timeout.ms=500

# The timeout for initialization of the Kafka store, including creation of the Kafka topic
# that stores schema data.
# kafkastore.init.timeout.ms

#The interval to commit offsets while consuming the Kafka topic
# kafkastore.commit.interval.ms=-1

# If true, this node can participate in master election. In a multi-colo setup, turn this off
# for clusters in the slave data center.
master.eligibility=true

# The string that is used as the zookeeper namespace for storing schema registry
# metadata. SchemaRegistry instances which are part of the same schema registry service
# should have the same ZooKeeper namespace.
schema.registry.zk.namespace=schema_registry

#The host name advertised in Zookeeper
host.name={{ schema_registry_advertized_hostname }}

#The Avro compatibility type. Valid values are: "
# "none (new schema can be any valid Avro schema), "
# "backward (new schema can read data produced by latest registered schema), "
# "forward (latest registered schema can read data produced by the new schema), "
# "full (new schema is backward and forward compatible with latest registered schema)";
avro.compatibility.level=backward

#METRICS_JMX_PREFIX_DEFAULT_OVERRIDE = "kafka.schema.registry";
#
#KAFKASTORE_WRITE_RETRIES_DOC    "Retry a failed register schema request to the underlying Kafka store up to this many times, "
#      + " for example in case of a Kafka broker failure";
#
#KAFKASTORE_WRITE_RETRY_BACKOFF_MS_DOC =
#      "The amount of time in milliseconds to wait before attempting to retry a failed write "
#      + "to the Kafka store";