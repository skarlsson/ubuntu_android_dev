broker.id={{kafka_broker_id}}
advertised.host.name={{ kafka_advertized_hostname }}
port={{kafka_server_port}}

num.network.threads={{kafka_server_num_network_threads}}
num.io.threads={{kafka_server_num_io_threads}}

background.threads=4
socket.send.buffer.bytes   ={{kafka_server_socket_send_buffer_bytes}}
socket.receive.buffer.bytes={{kafka_server_socket_receive_buffer_bytes}}
socket.request.max.bytes   ={{kafka_server_socket_request_max_bytes}}

############################# Log Basics #############################
auto.leader.rebalance.enable=false
auto.create.topics.enable=true
controlled.shutdown.enable=true
controlled.shutdown.retry.backoff.ms=30000
delete.topic.enable=true
fetch.purgatory.purge.interval.requests=1000

default.replication.factor={{ kafka_default_replication_factor }}


#where to store kafka topics
log.dir={% for item in kafka_log_dir -%}
{{ item.path }}{% if not loop.last %},{% endif %}
{%- endfor %}

num.partitions={{kafka_server_num_partitions}}

offsets.topic.replication.factor={{ kafka_default_replication_factor }}
offsets.topic.num.partitions=32

#Stanislav...
unclean.leader.election.enable=true

############################# Log Flush Policy #############################

# The following configurations control the flush of data to disk. This is the most
# important performance knob in kafka.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data is at greater risk of loss in the event of a crash.
#    2. Latency: Data is not made available to consumers until it is flushed (which adds latency).
#    3. Throughput: The flush is generally the most expensive operation.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
log.flush.interval.messages={{kafka_server_log_flush_interval_messages}}

# The maximum amount of time a message can sit in a log before we force a flush
log.flush.interval.ms={{kafka_server_log_flush_interval_ms}}

# Per-topic overrides for log.flush.interval.ms
#log.flush.intervals.ms.per.topic=topic1:1000, topic2:3000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion
log.retention.hours={{kafka_server_log_retention_hours}}

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes={{kafka_server_log_segment_bytes}}

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
#log.cleanup.interval.mins={{kafka_server_log_cleanup_interval_mins}}

log.cleaner.enable=true

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka zn

zookeeper.connect={% for server in zookeeper_hosts %}
{{server.host}}:{{ zookeeper_client_port }}{% if not loop.last %},{% endif %}
{% endfor %}

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms={{kafka_server_zookeeper_connection_timeout_ms}}


# We have a min fetch rate JMX in the broker. If that rate is n, set the former 
# to a value larger than 1/n * 1000. The latter is typically set to the observed max lag (a JMX bean) in the follower.
replica.lag.time.max.ms=20000
replica.lag.max.messages=20000
replica.fetch.wait.max.ms=100
replica.fetch.min.bytes=1
num.replica.fetchers=1
